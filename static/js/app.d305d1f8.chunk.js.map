{"version":3,"sources":["screens/NotFoundScreen.tsx","constants/Colors.ts","components/elements/ImageButtons.tsx","components/imagePicker.tsx","components/Themed.tsx","screens/TabOneScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","ImageButtons","state","selectedIndex","updateIndex","bind","this","setState","buttons","containerStyle","height","width","PureComponent","imagePicker","React","useState","selectedImage","setSelectedImage","openImagePickerAsync","a","async","ImagePicker","granted","alert","pickerResult","cancelled","Platform","OS","uploadToAnonymousFilesAsync","uri","remoteUri","localUri","Image","source","thumbnail","button","buttonText","Sharing","logo","instructions","marginBottom","marginHorizontal","borderRadius","resizeMode","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","TabOneScreen","separator","marginVertical","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","welcomeImage","marginLeft","codeHighlightText","paddingHorizontal","TabTwoScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","Ionicons","size","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","prefixes","Linking","config","screens","Root","TabOne","TabTwo","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","console","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.d305d1f8.chunk.js","sourcesContent":["import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","// rnpce\nimport React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\nimport { ButtonGroup } from 'react-native-elements/'\nexport class ImageButtons extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      selectedIndex: 2\n    }\n    this.updateIndex = this.updateIndex.bind(this)\n  }\n\n  updateIndex(selectedIndex) {\n    this.setState({ selectedIndex })\n  }\n\n  render() {\n    const buttons = ['Camera', 'Gallery', 'Share']\n    const { selectedIndex } = this.state\n\n    return (\n      <ButtonGroup\n        onPress={this.updateIndex}\n        selectedIndex={selectedIndex}\n        buttons={buttons}\n        containerStyle={{ height: 45, width: 200 }}\n      />\n    )\n  }\n}\n\nexport default ImageButtons\n","import React, { Component } from 'react'\nimport { Image, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n// import logo from '../assets/images/logo.png';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing';\nimport uploadToAnonymousFilesAsync from 'anonymous-files';\nimport ImageButtons from '../components/elements/ImageButtons'\nconst imagePicker = () => {\n  // render() {\n\n  const [selectedImage, setSelectedImage] = React.useState(null);\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert(\"Permission to access camera roll is required!\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    // console.log(pickerResult);\n    if (pickerResult.cancelled === true) {\n      return;\n    }\n\n    if (Platform.OS === 'web') {\n      let remoteUri = await uploadToAnonymousFilesAsync(pickerResult.uri);\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri });\n    } else {\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri: null });\n    }\n  };\n\n  let openShareDialogAsync = async () => {\n    if (!(await Sharing.isAvailableAsync())) {\n      alert(`The image is available for sharing at: ${selectedImage.remoteUri}`);\n      return;\n    }\n\n    await Sharing.shareAsync(selectedImage.localUri);\n  };\n\n  if (selectedImage !== null) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{ uri: selectedImage.localUri }}\n          style={styles.thumbnail}\n        />\n        {/* <Text style={styles.instructions}>\n          To share a photo from your phone with a friend,\n          </Text>\n          <Text style={styles.instructions}>\n          just press the button below!\n        </Text> */}\n        <ImageButtons />\n        <TouchableOpacity\n          onPress={openImagePickerAsync}\n          style={styles.button}>\n          <Text style={styles.buttonText}>Take a photo</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={openImagePickerAsync}\n          style={styles.button}>\n          <Text style={styles.buttonText}>Pick an Image</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={openShareDialogAsync} style={styles.button}>\n          <Text style={styles.buttonText}>Share It</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Image source={{ uri: \"https://i.imgur.com/TkIrScD.png\" }} style={styles.logo} />\n      <Text style={styles.instructions}>\n        To share a photo from your phone with a friend,\n          </Text>\n      <Text style={styles.instructions}>\n        just press the button below!\n          </Text>\n      <ImageButtons />\n      <TouchableOpacity\n        onPress={openImagePickerAsync}\n        style={styles.button}>\n        <Text style={styles.buttonText}>Take a photo</Text>\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={openImagePickerAsync}\n        style={styles.button}>\n        <Text style={styles.buttonText}>Pick an Image</Text>\n      </TouchableOpacity>\n    </View>\n  )\n}\n// }\n\nexport default imagePicker\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#888',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 305,\n    height: 159,\n    marginBottom: 20,\n  },\n  instructions: {\n    color: '#ccc',\n    fontSize: 18,\n    marginHorizontal: 15,\n    marginBottom: 7,\n  },\n  button: {\n    backgroundColor: \"blue\",\n    padding: 10,\n    borderRadius: 5,\n    marginBottom: 10\n  },\n  buttonText: {\n    fontSize: 17,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\",\n    // Try switching it from contain to stretch or cover \n    marginBottom: 20,\n  }\n});\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport IimagePicker from '../components/imagePicker';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabOneScreen() {\n  return (\n    <View style={styles.container}>\n      <IimagePicker />\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <Text style={styles.title}>Image Picker</Text>\n      {/* <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" /> */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#888',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 15,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#888',\n\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Tab One Title' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}