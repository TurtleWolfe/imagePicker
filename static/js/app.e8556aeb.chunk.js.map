{"version":3,"sources":["screens/NotFoundScreen.tsx","constants/Colors.ts","components/imagePicker.tsx","components/Themed.tsx","screens/TabOneScreen.tsx","components/LipPicker.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","imagePicker","React","useState","selectedImage","setSelectedImage","openImagePickerAsync","a","async","ImagePicker","granted","alert","pickerResult","cancelled","Platform","OS","uploadToAnonymousFilesAsync","uri","remoteUri","localUri","openShareDialogAsync","Sharing","source","thumbnail","PlaceholderContent","ActivityIndicator","buttonContainer","button","raised","icon","name","size","disabled","logo","instructions","flexDirection","width","height","marginBottom","marginHorizontal","buttonText","resizeMode","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","TabOneScreen","separator","marginVertical","LipPicker","component1","component2","component3","component4","component5","state","selectedIndex","updateIndex","bind","this","setState","buttons","element","containerStyle","PureComponent","TabTwoScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","Ionicons","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","prefixes","Linking","config","screens","Root","TabOne","TabTwo","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","font","require","console","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.e8556aeb.chunk.js","sourcesContent":["import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import React, { Component } from 'react'\nimport { ActivityIndicator, Platform, StyleSheet, TouchableOpacity, View } from 'react-native';\nimport { Button, Card, Image, Text, } from 'react-native-elements';\n// import logo from '../assets/images/logo.png';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing';\nimport uploadToAnonymousFilesAsync from 'anonymous-files';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n// import ImageButtons from '../components/elements/ImageButtons'\nconst imagePicker = () => {\n  // render() {\n  const [selectedImage, setSelectedImage] = React.useState(null);\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert(\"Permission to access camera roll is required!\");\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    // console.log(pickerResult);\n    if (pickerResult.cancelled === true) {\n      return;\n    }\n\n    if (Platform.OS === 'web') {\n      let remoteUri = await uploadToAnonymousFilesAsync(pickerResult.uri);\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri });\n    } else {\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri: null });\n    }\n  };\n\n  let openShareDialogAsync = async () => {\n    if (!(await Sharing.isAvailableAsync())) {\n      alert(`The image is available for sharing at: ${selectedImage.remoteUri}`);\n      return;\n    }\n\n    await Sharing.shareAsync(selectedImage.localUri);\n  };\n\n  if (selectedImage !== null) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{ uri: selectedImage.localUri }}\n          style={styles.thumbnail}\n          PlaceholderContent={<ActivityIndicator />}\n        />\n        {/* <ImageButtons /> */}\n        <View style={styles.buttonContainer}>\n          {/* start of button group view */}\n          <Button\n            // title=\"Camera\"\n            onPress={openImagePickerAsync}\n            style={styles.button}\n            raised\n            icon={\n              <Icon\n                name=\"camera\"\n                size={15}\n                color=\"white\"\n              />\n            }\n          >\n            {/* <Text style={styles.buttonText}>Take a photo</Text> */}\n          </Button>\n          <Button\n            // title=\"Gallery\"\n            onPress={openImagePickerAsync}\n            style={styles.button}\n            raised\n            icon={\n              <Icon\n                name=\"folder-open\"\n                size={15}\n                color=\"white\"\n              />\n            }\n          >\n            {/* <Text style={styles.buttonText}>Pick an Image</Text> */}\n          </Button>\n          <Button\n            // title=\"Share\"\n            onPress={openShareDialogAsync}\n            style={styles.button}\n            raised\n            icon={\n              <Icon\n                name=\"share\"\n                size={15}\n                color=\"white\"\n              />\n            }\n          >\n            {/* <Text style={styles.buttonText}>Share It</Text> */}\n          </Button>\n          <Button\n            // title=\"Share\"\n            onPress={openShareDialogAsync}\n            style={styles.button}\n            raised\n            disabled\n            icon={\n              <Icon\n                name=\"share\"\n                size={15}\n                color=\"white\"\n              />\n            }\n          >\n            {/* <Text style={styles.buttonText}>Share It</Text> */}\n          </Button>\n          <Button\n            // title=\"Share\"\n            onPress={openShareDialogAsync}\n            style={styles.button}\n            raised\n            disabled\n            icon={\n              <Icon\n                name=\"share\"\n                size={15}\n                color=\"white\"\n              />\n            }\n          >\n            {/* <Text style={styles.buttonText}>Share It</Text> */}\n          </Button>\n        </View>\n        {/* end of button group view */}\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <Image source={{ uri: \"https://i.imgur.com/TkIrScD.png\" }} style={styles.logo} />\n      <Text style={styles.instructions}>\n        To share a photo from your phone,\n          </Text>\n      <Text style={styles.instructions}>\n        just press the button below!\n          </Text>\n      {/* <ImageButtons /> */}\n      {/* <ImageButtons /> */}\n      <View style={styles.buttonContainer}>\n        {/* start of button group view */}\n        <Button\n          // title=\"Camera\"\n          onPress={openImagePickerAsync}\n          style={styles.button}\n          raised\n          icon={\n            <Icon\n              name=\"camera\"\n              size={15}\n              color=\"white\"\n            />\n          }\n        >\n          {/* <Text style={styles.buttonText}>Take a photo</Text> */}\n        </Button>\n        <Button\n          // title=\"Gallery\"\n          onPress={openImagePickerAsync}\n          style={styles.button}\n          raised\n          icon={\n            <Icon\n              name=\"folder-open\"\n              size={15}\n              color=\"white\"\n            />\n          }\n        >\n          {/* <Text style={styles.buttonText}>Pick an Image</Text> */}\n        </Button>\n        <Button\n          // title=\"Share\"\n          onPress={openShareDialogAsync}\n          style={styles.button}\n          raised\n          disabled\n          icon={\n            <Icon\n              name=\"share\"\n              size={15}\n              color=\"white\"\n            />\n          }\n        >\n          {/* <Text style={styles.buttonText}>Share It</Text> */}\n        </Button>\n        <Button\n          // title=\"Share\"\n          onPress={openShareDialogAsync}\n          style={styles.button}\n          raised\n          disabled\n          icon={\n            <Icon\n              name=\"share\"\n              size={15}\n              color=\"white\"\n            />\n          }\n        >\n          {/* <Text style={styles.buttonText}>Share It</Text> */}\n        </Button>\n        <Button\n          // title=\"Share\"\n          onPress={openShareDialogAsync}\n          style={styles.button}\n          raised\n          disabled\n          icon={\n            <Icon\n              name=\"share\"\n              size={15}\n              color=\"white\"\n            />\n          }\n        >\n          {/* <Text style={styles.buttonText}>Share It</Text> */}\n        </Button>\n      </View>\n      {/* end of button group view */}\n    </View>\n  )\n}\n// }\n\nexport default imagePicker\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#888',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  buttonContainer: {\n    // flex: 1,\n    flexDirection: \"row\",\n    backgroundColor: '#888',\n    alignItems: 'center',\n    width: 200,\n    justifyContent: 'space-between',\n  },\n  logo: {\n    width: 305,\n    height: 159,\n    marginBottom: 20,\n  },\n  instructions: {\n    color: '#ccc',\n    fontSize: 18,\n    marginHorizontal: 15,\n    marginBottom: 7,\n  },\n  button: {\n    // backgroundColor: \"blue\",\n    // padding: 10,\n    // borderRadius: 5,\n    // marginBottom: 10\n  },\n  buttonText: {\n    fontSize: 17,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\",\n    // Try switching it from contain to stretch or cover \n    marginBottom: 20,\n  }\n});\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport IimagePicker from '../components/imagePicker';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabOneScreen() {\n  return (\n    <View style={styles.container}>\n      <IimagePicker />\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <Text style={styles.title}>Image Picker</Text>\n      {/* <EditScreenInfo path=\"/screens/TabOneScreen.tsx\" /> */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#888',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 15,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import React, { PureComponent } from 'react'\nimport { Text, View } from 'react-native'\nimport { Button } from 'react-native-elements';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport { ButtonGroup } from 'react-native-elements/'\n\nexport class LipPicker extends PureComponent {\n  constructor() {\n    super()\n    this.state = {\n      selectedIndex: 2\n    }\n    this.updateIndex = this.updateIndex.bind(this)\n  }\n  updateIndex(selectedIndex) {\n    this.setState({ selectedIndex })\n  }\n\n  component1 = () => <Text>Camera</Text>\n  component2 = () => <Text>Gallery</Text>\n  component3 = () => <Text>Share</Text>\n  component4 = () => <Text>four</Text>\n  component5 = () => <Text>five</Text>\n\n  render() {\n    const buttons = [{ element: this.component1 }, { element: this.component2 }, { element: this.component3 }, { element: this.component4 }, { element: this.component5 }]\n    const { selectedIndex } = this.state\n    return (\n      <ButtonGroup\n        onPress={this.updateIndex}\n        selectedIndex={selectedIndex}\n        buttons={buttons}\n        containerStyle={{ height: 45, width: 260 }} />\n    )\n  }\n}\n\nexport default LipPicker\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\n// import EditScreenInfo from '../components/EditScreenInfo';\nimport LipPicker from '../components/LipPicker';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <LipPicker />\n      {/* <Text style={styles.title}>Tab Two</Text> */}\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      {/* <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" /> */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#888',\n\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Tab One Title' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}